package com.stonymoon.bboard.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.stonymoon.bboard.bean.ItunesSong;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITUNES_SONG".
*/
public class ItunesSongDao extends AbstractDao<ItunesSong, Void> {

    public static final String TABLENAME = "ITUNES_SONG";

    /**
     * Properties of entity ItunesSong.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NowColor = new Property(0, String.class, "nowColor", false, "NOW_COLOR");
        public final static Property Position = new Property(1, int.class, "position", false, "POSITION");
        public final static Property NowPoint = new Property(2, double.class, "nowPoint", false, "NOW_POINT");
        public final static Property Discounted = new Property(3, int.class, "discounted", false, "DISCOUNTED");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
    }


    public ItunesSongDao(DaoConfig config) {
        super(config);
    }
    
    public ItunesSongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITUNES_SONG\" (" + //
                "\"NOW_COLOR\" TEXT," + // 0: nowColor
                "\"POSITION\" INTEGER NOT NULL ," + // 1: position
                "\"NOW_POINT\" REAL NOT NULL ," + // 2: nowPoint
                "\"DISCOUNTED\" INTEGER NOT NULL ," + // 3: discounted
                "\"TITLE\" TEXT);"); // 4: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITUNES_SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItunesSong entity) {
        stmt.clearBindings();
 
        String nowColor = entity.getNowColor();
        if (nowColor != null) {
            stmt.bindString(1, nowColor);
        }
        stmt.bindLong(2, entity.getPosition());
        stmt.bindDouble(3, entity.getNowPoint());
        stmt.bindLong(4, entity.getDiscounted());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItunesSong entity) {
        stmt.clearBindings();
 
        String nowColor = entity.getNowColor();
        if (nowColor != null) {
            stmt.bindString(1, nowColor);
        }
        stmt.bindLong(2, entity.getPosition());
        stmt.bindDouble(3, entity.getNowPoint());
        stmt.bindLong(4, entity.getDiscounted());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ItunesSong readEntity(Cursor cursor, int offset) {
        ItunesSong entity = new ItunesSong( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nowColor
            cursor.getInt(offset + 1), // position
            cursor.getDouble(offset + 2), // nowPoint
            cursor.getInt(offset + 3), // discounted
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItunesSong entity, int offset) {
        entity.setNowColor(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPosition(cursor.getInt(offset + 1));
        entity.setNowPoint(cursor.getDouble(offset + 2));
        entity.setDiscounted(cursor.getInt(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ItunesSong entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ItunesSong entity) {
        return null;
    }

    @Override
    public boolean hasKey(ItunesSong entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
